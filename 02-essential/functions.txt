- Function return value types 
: between parameter and {} 

    function add(a: number, b: number): number {
        return a + b;
    }

    // invalid 
    function add(a: number, b: number): string {
        return a + b;
    }

    typescript automatically infer the type this case but when we use complicated function, we might need function return value type.


- Void type
: typescript already infer but we sometimes need it for the function 
: void means this function doesn't retrun anything
: you can assign undefined or null only

    function log(message: string): void {
        console.log(message);
   }


- Never type
: it's used with functions that never return a value
: or with functions that always throw an exception

    function logAndThrow(errorMessage: string): never {
        console.log(errorMessage);
        throw new Error(errorMessage);
    }


- Functions as types 

    callback function must accept argument with string type and it should return undefined or null (void)

    so we call the callback in the function with string argument 

        function performJob(callback: (m: string) => void) {
            callback("job done!");
        }


    for example this function is perfect match for the performJob function.

    (m: stirng) and (msg: string) doesn't matter to match the name but the most important thing is matched type. 

        const logMsg = (msg: string) => {
            console.log(msg);
        };

    finally we call the performJob function 
    
        performJob(logMsg);

    in object type definition 

        type User = {
            name: string;
            age: number;
            greet: () => string;
        };

        let user: User = {
            name: "Begana",
            age: 36,
            greet() {
                console.log("Hello, ");
                return this.name;
            },
        };


- null & undefined : special types 
