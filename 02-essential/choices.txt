- Enums 
: only allows certain kind of options

    enum Role {
        Admin, // 0
        Editor, // 1
        Guest, // 2
    }

    let userRole: Role = Role.Admin;
    or
    let userRole: Role = 0;

    // setting default values 

    enum Role {
        Admin = 1, 
        Editor, // 2
        Guest,  // 3
    }

    let userRole: Role = 1; // Admin

    enum Role {
        Admin = 'Admin', // 0
        Editor = 'Editor', // 1
        Guest = 'Guest', // 2
    }


- Literal type 

    let userRole: "admin" = "admin";
    let userRole: "admin" = "guest"; // invalid 

    // combine with union type (literal + union)
    let userRole: "admin" | 'editor' | "guest" = "guest";
    userRole = "admin";


    - enum? literal? => personal choice but literal type is more elegant


    - tuples + literal 
    let possibleResults: [number, number];
    => let possibleResults: [1 | -1, 1 | -1];


- Type alias a.k.a. Custom type 
: store many types and reuse 

    let userRole: "admin" | "editor" | "guest" | "reader" = "guest";
    instead of this....

    => type Role = "admin" | "editor" | "guest" | "reader";
    
    let userRole: Role = "guest";
    
    function access(role: Role) {
        //...
    }

    we can deal with object type too 
    type User = {
        name: string;
        age: number;
        role: Role;
        permission: string[];
    };